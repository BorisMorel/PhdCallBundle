<?php

namespace IMAG\PhdCallBundle\Repository;

use Doctrine\ORM\EntityRepository;

use Symfony\Component\Security\Core\User\UserProviderInterface,
    Symfony\Component\Security\Core\User\UserInterface,
    Symfony\Component\Security\Core\Exception\UsernameNotFoundException,
    Symfony\Component\Security\Core\Exception\UnsupportedUserException
    ;

use IMAG\PhdCallBundle\Entity\User;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserProviderInterface
{
    public function getById($id)
    {
        $q = $this->createQueryBuilder('u')
            ->select('u')
            ->where('u.id = ?1')
            ->setParameter(1, $id)
            ->getQuery()
            ;

        return $q->getOneOrNullResult();
    }

    /**
     * {@inheritdoc}
     */
    public function loadUserByUsername($username)
    {
        // Throw the exception if the username is not provided.
        if (empty($username)) {
            throw new UsernameNotFoundException('The username is not provided.');
        }

        $q = $this->createQueryBuilder('u')
            ->select('u', 'us')
            ->leftJoin('u.student', 'us')
            ->where('u.email LIKE ?1')
            ->setParameter(1, $username)
            ->getQuery()
            ;

        try {
            return $q->getSingleResult();
        } catch(\Exception $expt) {
            throw new UsernameNotFoundException(sprintf('User "%s" not found', $username));
        }
        
    }

    /**
     * {@inheritdoc}
     */
    public function refreshUser(UserInterface $user)
    {
        if (!$user instanceof User) {
            throw new UnsupportedUserException(sprintf('Instance of "%s" are not supported.', get_class($user)));
        }
        
        return $this->loadUserByUsername($user->getEmail());
    }
    
    public function supportsClass($class)
    {
        return $class === 'IMAG\PhdCallBundle\Entity\User';
    }
}